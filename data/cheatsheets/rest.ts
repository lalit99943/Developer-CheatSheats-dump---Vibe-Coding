import { CheatSheet } from '../../types';

export const restCheatSheets: CheatSheet[] = [
  {
    id: 'rest-1',
    category: 'Rest',
    subCategory: 'bash',
    title: 'HTTP GET Method (cURL)',
    snippet: 'curl https://api.example.com/users/123',
    description: 'The GET method requests a representation of the specified resource. Requests using GET should only retrieve data and should have no other effect.',
    tags: ['rest', 'http', 'get', 'curl', 'api'],
  },
  {
    id: 'rest-2',
    category: 'Rest',
    subCategory: 'bash',
    title: 'HTTP POST Method (cURL)',
    snippet: 'curl -X POST -H "Content-Type: application/json" \\\n-d \'{"name": "John Doe", "email": "john.doe@example.com"}\' \\\nhttps://api.example.com/users',
    description: 'The POST method is used to submit an entity to the specified resource, often causing a change in state or side effects on the server. It is commonly used for creating new resources.',
    tags: ['rest', 'http', 'post', 'curl', 'api', 'create', 'json'],
  },
  {
    id: 'rest-3',
    category: 'Rest',
    subCategory: 'bash',
    title: 'HTTP PUT Method (cURL)',
    snippet: 'curl -X PUT -H "Content-Type: application/json" \\\n-d \'{"name": "Johnathan Doe", "email": "john.doe@example.com"}\' \\\nhttps://api.example.com/users/123',
    description: 'The PUT method replaces all current representations of the target resource with the request payload. It is idempotent, meaning multiple identical requests should have the same effect as a single one.',
    tags: ['rest', 'http', 'put', 'curl', 'api', 'update', 'replace'],
  },
  {
    id: 'rest-4',
    category: 'Rest',
    subCategory: 'bash',
    title: 'HTTP PATCH Method (cURL)',
    snippet: 'curl -X PATCH -H "Content-Type: application/json" \\\n-d \'{"name": "Johnny Doe"}\' \\\nhttps://api.example.com/users/123',
    description: 'The PATCH method is used to apply partial modifications to a resource. Unlike PUT, it only needs to contain the changes to the resource, not the complete resource.',
    tags: ['rest', 'http', 'patch', 'curl', 'api', 'update', 'partial'],
  },
  {
    id: 'rest-5',
    category: 'Rest',
    subCategory: 'bash',
    title: 'HTTP DELETE Method (cURL)',
    snippet: 'curl -X DELETE https://api.example.com/users/123',
    description: 'The DELETE method deletes the specified resource. Subsequent GET requests to that resource should result in a 404 (Not Found).',
    tags: ['rest', 'http', 'delete', 'curl', 'api', 'remove'],
  },
  {
    id: 'rest-6',
    category: 'Rest',
    subCategory: 'http',
    title: 'HTTP Status Codes: 2xx Success',
    snippet: '200 OK - Request succeeded.\n201 Created - Request succeeded and a new resource was created.\n204 No Content - Request succeeded, but there is no content to return (e.g., for a DELETE request).',
    description: '2xx status codes indicate that the client\'s request was successfully received, understood, and accepted.',
    tags: ['rest', 'http', 'status code', 'success', '200', '201', '204'],
  },
  {
    id: 'rest-7',
    category: 'Rest',
    subCategory: 'http',
    title: 'HTTP Status Codes: 4xx Client Error',
    snippet: '400 Bad Request - The server cannot process the request due to a client error (e.g., malformed syntax).\n401 Unauthorized - Authentication is required and has failed or has not yet been provided.\n404 Not Found - The server can\'t find the requested resource.',
    description: '4xx status codes indicate that there was a problem with the client\'s request.',
    tags: ['rest', 'http', 'status code', 'client error', '400', '401', '404'],
  },
  {
    id: 'rest-8',
    category: 'Rest',
    subCategory: 'http',
    title: 'HTTP Status Codes: 5xx Server Error',
    snippet: '500 Internal Server Error - A generic error message, given when an unexpected condition was encountered.\n502 Bad Gateway - The server, while acting as a gateway or proxy, received an invalid response from an inbound server.\n503 Service Unavailable - The server is not ready to handle the request (e.g., down for maintenance or overloaded).',
    description: '5xx status codes indicate that the server failed to fulfill a valid request.',
    tags: ['rest', 'http', 'status code', 'server error', '500', '502', '503'],
  },
  {
    id: 'rest-9',
    category: 'Rest',
    subCategory: 'javascript',
    title: 'Fetch API GET Request',
    snippet: 'fetch(\'https://api.example.com/data\')\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(\'Error:\', error));',
    description: 'A simple example of making a GET request using the browser\'s built-in `fetch` API and handling the response with Promises.',
    tags: ['rest', 'javascript', 'fetch', 'api', 'get', 'promise'],
  },
  {
    id: 'rest-10',
    category: 'Rest',
    subCategory: 'javascript',
    title: 'Fetch API POST Request',
    snippet: 'const data = { username: \'example\' };\n\nfetch(\'https://api.example.com/users\', {\n  method: \'POST\',\n  headers: {\n    \'Content-Type\': \'application/json\',\n  },\n  body: JSON.stringify(data),\n})\n.then(response => response.json())\n.then(data => console.log(\'Success:\', data))\n.catch((error) => console.error(\'Error:\', error));',
    description: 'An example of making a POST request with `fetch`, including setting the method, headers, and a JSON body.',
    tags: ['rest', 'javascript', 'fetch', 'api', 'post', 'json', 'promise'],
  },
  {
    id: 'rest-11',
    category: 'Rest',
    subCategory: 'bash',
    title: 'cURL with Authorization Header',
    snippet: 'curl -H "Authorization: Bearer YOUR_ACCESS_TOKEN" https://api.example.com/secure-data',
    description: 'Shows how to send an API request using cURL with a custom Authorization header, commonly used for authenticating with tokens (e.g., JWT, OAuth).',
    tags: ['rest', 'curl', 'http', 'authorization', 'header', 'token', 'jwt', 'oauth'],
  },
  {
    id: 'rest-12',
    category: 'Rest',
    subCategory: 'json',
    title: 'Idempotency in REST',
    snippet: 'GET, PUT, DELETE are idempotent.\nPOST, PATCH are not necessarily idempotent.',
    description: 'An operation is idempotent if making it multiple times has the same effect as making it once. GET, PUT, and DELETE should always be designed to be idempotent. POST is generally not idempotent (e.g., creating two resources).',
    tags: ['rest', 'api', 'design', 'idempotent', 'http'],
  },
  {
    id: 'rest-13',
    category: 'Rest',
    subCategory: 'http',
    title: 'HTTP Status Code: 403 Forbidden',
    snippet: '403 Forbidden - The client does not have access rights to the content; i.e., it is unauthorized, so the server is refusing to give the requested resource. Unlike 401, the client\'s identity is known to the server.',
    description: 'This status code means the server understood the request but refuses to authorize it. Authenticating will make no difference.',
    tags: ['rest', 'http', 'status code', 'client error', '403', 'forbidden', 'security'],
  },
  {
    id: 'rest-14',
    category: 'Rest',
    subCategory: 'javascript',
    title: 'Async/Await Fetch API GET Request',
    snippet: 'async function getData() {\n  try {\n    const response = await fetch(\'https://api.example.com/data\');\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error(\'Could not fetch data:\', error);\n  }\n}\n\ngetData();',
    description: 'A more modern way to make a GET request using async/await syntax, which simplifies working with Promises and includes basic error handling.',
    tags: ['rest', 'javascript', 'fetch', 'api', 'get', 'async', 'await', 'es6'],
  },
  {
    id: 'rest-15',
    category: 'Rest',
    subCategory: 'http',
    title: 'HTTP Status Code: 201 Created',
    snippet: '201 Created - The request has been fulfilled and has resulted in one or more new resources being created. The new resource is created before the response is sent back and the new resource is returned in the body of the message, its location being either the URL of the request, or the content of the Location header.',
    description: 'This status code is the standard response for a successful POST request that creates a new resource on the server.',
    tags: ['rest', 'http', 'status code', 'success', '201', 'created', 'post'],
  },
  {
    id: 'rest-16',
    category: 'Rest',
    subCategory: 'http',
    title: 'Common HTTP Headers',
    snippet: `Content-Type: application/json  // Informs the server about the request body's media type.
Accept: application/json        // Informs the server what media type the client can understand.
Authorization: Bearer <token>  // Carries credentials for authenticating the client.
Cache-Control: no-cache        // Specifies caching policies for requests and responses.`,
    description: 'HTTP headers are key-value pairs that let the client and the server pass additional information with an HTTP request or response. These are some of the most frequently used headers in REST APIs.',
    tags: ['rest', 'http', 'headers', 'content-type', 'accept', 'authorization', 'cache'],
  },
];