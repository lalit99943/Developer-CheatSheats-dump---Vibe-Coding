import { CheatSheet } from '../../types';

export const springMvcCheatSheets: CheatSheet[] = [
  {
    id: 'springmvc-1',
    category: 'SpringMVC',
    subCategory: 'java',
    title: '@Controller and @RestController',
    snippet: '@Controller\npublic class MyViewController {}\n\n@RestController\npublic class MyApiController {}',
    description: '@Controller is used for traditional Spring MVC controllers that return view names. @RestController is a convenience annotation that combines @Controller and @ResponseBody, making it suitable for creating RESTful web services.',
    tags: ['springmvc', 'web', 'controller', 'restcontroller', 'rest'],
  },
  {
    id: 'springmvc-2',
    category: 'SpringMVC',
    subCategory: 'java',
    title: '@RequestMapping and HTTP Methods',
    snippet: '@RestController\n@RequestMapping("/api/users")\npublic class UserController {\n    @RequestMapping(method = RequestMethod.GET)\n    public List<User> getAllUsers() { /*...*/ }\n\n    @RequestMapping(value = "/{id}", method = RequestMethod.GET)\n    public User getUserById(@PathVariable Long id) { /*...*/ }\n}',
    description: 'Maps web requests to specific handler classes and/or handler methods. It can be configured with path, HTTP method, headers, etc.',
    tags: ['springmvc', 'requestmapping', 'routing', 'http', 'get', 'post'],
  },
  {
    id: 'springmvc-3',
    category: 'SpringMVC',
    subCategory: 'java',
    title: 'Shortcut Mapping Annotations',
    snippet: '@GetMapping("/items")\npublic List<Item> getItems() { /*...*/ }\n\n@PostMapping("/items")\npublic Item createItem(@RequestBody Item item) { /*...*/ }\n\n@PutMapping("/items/{id}")\npublic Item updateItem(...) { /*...*/ }\n\n@DeleteMapping("/items/{id}")\npublic void deleteItem(...) { /*...*/ }',
    description: 'Convenience annotations for @RequestMapping that are specific to HTTP methods: @GetMapping, @PostMapping, @PutMapping, @DeleteMapping, and @PatchMapping.',
    tags: ['springmvc', 'getmapping', 'postmapping', 'putmapping', 'deletemapping', 'rest'],
  },
  {
    id: 'springmvc-4',
    category: 'SpringMVC',
    subCategory: 'java',
    title: '@PathVariable - URI Path Variables',
    snippet: '@GetMapping("/users/{userId}/posts/{postId}")\npublic String getPost(@PathVariable Long userId, @PathVariable Long postId) {\n    return "User: " + userId + ", Post: " + postId;\n}',
    description: 'Binds a method parameter to a URI template variable. Allows for clean and RESTful URLs.',
    tags: ['springmvc', 'pathvariable', 'url', 'parameter', 'rest'],
  },
  {
    id: 'springmvc-5',
    category: 'SpringMVC',
    subCategory: 'java',
    title: '@RequestParam - Query Parameters',
    snippet: '@GetMapping("/search")\npublic List<Product> searchProducts(@RequestParam("q") String query, @RequestParam(required = false, defaultValue = "1") int page) {\n    // ... search logic ...\n}',
    description: 'Binds a method parameter to a web request parameter from the query string (e.g., ?q=books). Can be marked as optional and given a default value.',
    tags: ['springmvc', 'requestparam', 'query', 'parameter'],
  },
  {
    id: 'springmvc-6',
    category: 'SpringMVC',
    subCategory: 'java',
    title: '@RequestBody and @ResponseBody',
    snippet: '@PostMapping("/users")\n@ResponseBody // not needed in @RestController\npublic User createUser(@RequestBody User newUser) {\n    // newUser is deserialized from the request body\n    return userService.save(newUser); // returned User is serialized to response body\n}',
    description: '@RequestBody binds the HTTP request body to a method parameter. @ResponseBody indicates a method return value should be bound to the web response body. @RestController includes @ResponseBody by default.',
    tags: ['springmvc', 'requestbody', 'responsebody', 'json', 'xml', 'rest'],
  },
  {
    id: 'springmvc-7',
    category: 'SpringMVC',
    subCategory: 'java',
    title: 'ResponseEntity for Full Response Control',
    snippet: '@GetMapping("/products/{id}")\npublic ResponseEntity<Product> getProduct(@PathVariable Long id) {\n    Product product = service.findById(id);\n    if (product == null) {\n        return ResponseEntity.notFound().build();\n    }\n    return ResponseEntity.ok(product);\n}',
    description: 'Represents the entire HTTP response, including status code, headers, and body. It gives you full control over the response sent to the client.',
    tags: ['springmvc', 'responseentity', 'http', 'status-code', 'headers', 'rest'],
  },
  {
    id: 'springmvc-8',
    category: 'SpringMVC',
    subCategory: 'java',
    title: '@ControllerAdvice and @ExceptionHandler',
    snippet: '@ControllerAdvice\npublic class GlobalExceptionHandler {\n    @ExceptionHandler(ResourceNotFoundException.class)\n    public ResponseEntity<String> handleNotFound(ResourceNotFoundException ex) {\n        return new ResponseEntity<>(ex.getMessage(), HttpStatus.NOT_FOUND);\n    }\n}',
    description: '@ControllerAdvice allows you to handle exceptions across the whole application in one global component. @ExceptionHandler methods handle specific exceptions and return a custom response.',
    tags: ['springmvc', 'exceptionhandler', 'controlleradvice', 'error-handling', 'global'],
  },
  {
    id: 'springmvc-9',
    category: 'SpringMVC',
    subCategory: 'java',
    title: '@ModelAttribute',
    snippet: '@PostMapping("/register")\npublic String registerUser(@ModelAttribute("user") User user) {\n    // ... process user registration ...\n    return "redirect:/success";\n}',
    description: 'Binds a method parameter or method return value to a named model attribute, which is then exposed to a web view. Commonly used with form submissions in traditional MVC.',
    tags: ['springmvc', 'modelattribute', 'forms', 'data-binding', 'view'],
  },
  {
    id: 'springmvc-10',
    category: 'SpringMVC',
    subCategory: 'java',
    title: 'Redirecting and Forwarding',
    snippet: '@GetMapping("/old-url")\npublic String redirect() {\n    return "redirect:/new-url";\n}\n\n@GetMapping("/another-url")\npublic String forward() {\n    return "forward:/yet-another-url";\n}',
    description: 'In a @Controller method, returning a string prefixed with `redirect:` sends an HTTP 302 redirect to the client. Prefixed with `forward:`, it forwards the request to another handler on the server side without a new client request.',
    tags: ['springmvc', 'redirect', 'forward', 'controller', 'navigation'],
  },
  {
    id: 'springmvc-11',
    category: 'SpringMVC',
    subCategory: 'java',
    title: '@PatchMapping',
    snippet: '@PatchMapping("/users/{id}")\npublic User partialUpdateUser(@PathVariable Long id, @RequestBody Map<String, Object> updates) {\n    return userService.patch(id, updates);\n}',
    description: 'A shortcut for @RequestMapping(method = RequestMethod.PATCH). It maps HTTP PATCH requests, typically used for partial updates to a resource.',
    tags: ['springmvc', 'patchmapping', 'rest', 'update', 'partial'],
  },
  {
    id: 'springmvc-12',
    category: 'SpringMVC',
    subCategory: 'java',
    title: '@RequestHeader',
    snippet: '@GetMapping("/info")\npublic String getHeaderInfo(@RequestHeader("User-Agent") String userAgent) {\n    return "Request from User-Agent: " + userAgent;\n}',
    description: 'Binds a method parameter to a request header. Useful for reading metadata from the HTTP request.',
    tags: ['springmvc', 'requestheader', 'header', 'http'],
  },
  {
    id: 'springmvc-13',
    category: 'SpringMVC',
    subCategory: 'java',
    title: '@ResponseStatus',
    snippet: '@PostMapping("/users")\n@ResponseStatus(HttpStatus.CREATED)\npublic User createUser(@RequestBody User user) {\n    return userService.create(user);\n}',
    description: 'Marks a method or exception class with the status code and reason that should be returned. A convenient way to set the HTTP status without using ResponseEntity.',
    tags: ['springmvc', 'responsestatus', 'http', 'status-code'],
  },
  {
    id: 'springmvc-14',
    category: 'SpringMVC',
    subCategory: 'java',
    title: '@CrossOrigin',
    snippet: '@CrossOrigin(origins = "http://example.com")\n@RestController\npublic class MyController {\n    // ... controller methods ...\n}',
    description: 'Enables Cross-Origin Resource Sharing (CORS) on a controller or a specific handler method. It allows you to control which external domains can call your endpoints.',
    tags: ['springmvc', 'cors', 'crossorigin', 'security', 'web'],
  },
  {
    id: 'springmvc-15',
    category: 'SpringMVC',
    subCategory: 'java',
    title: '@Valid',
    snippet: '@PostMapping("/users")\npublic ResponseEntity<User> createUser(@Valid @RequestBody User user) {\n    // If validation fails, MethodArgumentNotValidException is thrown\n    User createdUser = userService.save(user);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdUser);\n}',
    description: 'Marks an argument for validation. Spring automatically validates the object and throws an exception if the validation fails. Requires a validation implementation like Hibernate Validator.',
    tags: ['springmvc', 'validation', 'valid', 'bean-validation', 'data-binding'],
  },
];
