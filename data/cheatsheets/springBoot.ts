import { CheatSheet } from '../../types';

export const springBootCheatSheets: CheatSheet[] = [
  {
    id: 'springboot-1',
    category: 'SpringBoot',
    subCategory: 'java',
    title: '@SpringBootApplication',
    snippet: '@SpringBootApplication\npublic class MyApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(MyApplication.class, args);\n    }\n}',
    description: 'A convenience annotation that adds all of the following: @Configuration, @EnableAutoConfiguration, and @ComponentScan. It is typically used on the main class of a Spring Boot application.',
    tags: ['springboot', 'main', 'bootstrap', 'autoconfiguration'],
  },
  {
    id: 'springboot-2',
    category: 'SpringBoot',
    subCategory: 'properties',
    title: 'Common application.properties',
    snippet: '# Server Port\nserver.port=8080\n\n# Database Connection\nspring.datasource.url=jdbc:mysql://localhost/test\nspring.datasource.username=dbuser\nspring.datasource.password=dbpass\n\n# Logging Level\nlogging.level.com.example=DEBUG',
    description: 'Spring Boot uses an `application.properties` or `application.yml` file for configuration. This snippet shows how to configure the server port, database connection, and logging levels.',
    tags: ['springboot', 'properties', 'configuration', 'server', 'database'],
  },
  {
    id: 'springboot-3',
    category: 'SpringBoot',
    subCategory: 'java',
    title: 'Spring Boot Starters',
    snippet: '<!-- pom.xml -->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\n</dependency>',
    description: 'Starters are convenient dependency descriptors that you can include in your application. They provide a one-stop-shop for all the Spring and related technology that you need, without having to hunt through sample code and copy paste loads of dependency descriptors.',
    tags: ['springboot', 'maven', 'pom', 'starter', 'dependency'],
  },
  {
    id: 'springboot-4',
    category: 'SpringBoot',
    subCategory: 'java',
    title: '@SpringBootTest for Integration Testing',
    snippet: '@SpringBootTest\nclass MyApplicationTests {\n    @Autowired\n    private MyService myService;\n\n    @Test\n    void contextLoads() {\n        // Verifies that the application context can start successfully\n        assertThat(myService).isNotNull();\n    }\n}',
    description: 'Annotation that can be specified on a test class that runs Spring Boot based tests. It loads the complete application context for integration testing.',
    tags: ['springboot', 'test', 'integration-test', 'springboottest'],
  },
  {
    id: 'springboot-5',
    category: 'SpringBoot',
    subCategory: 'java',
    title: '@WebMvcTest for Controller Slice Testing',
    snippet: '@WebMvcTest(UserController.class)\nclass UserControllerTest {\n    @Autowired\n    private MockMvc mockMvc;\n\n    @MockBean\n    private UserService userService;\n\n    @Test\n    void testGetUser() throws Exception {\n        // ... setup mock behavior for userService ...\n        mockMvc.perform(get("/api/users/1"))\n               .andExpect(status().isOk());\n    }\n}',
    description: 'Used for Spring MVC tests. It auto-configures the Spring MVC infrastructure and limits scanned beans to @Controller, @ControllerAdvice etc. It does not load the full application context.',
    tags: ['springboot', 'test', 'slice-test', 'webmvctest', 'mockmvc'],
  },
  {
    id: 'springboot-6',
    category: 'SpringBoot',
    subCategory: 'java',
    title: '@DataJpaTest for JPA Slice Testing',
    snippet: '@DataJpaTest\nclass UserRepositoryTest {\n    @Autowired\n    private TestEntityManager entityManager;\n\n    @Autowired\n    private UserRepository repository;\n\n    @Test\n    void testSaveUser() {\n        // ... use entityManager to setup data ...\n        // ... use repository to test methods ...\n    }\n}',
    description: 'Provides a minimal configuration for testing the persistence layer. It configures an in-memory database, scans for @Entity classes, and aconfigures Spring Data JPA repositories. It does not load other parts of the application.',
    tags: ['springboot', 'test', 'slice-test', 'datajpatest', 'jpa', 'repository'],
  },
  {
    id: 'springboot-7',
    category: 'SpringBoot',
    subCategory: 'java',
    title: '@ConfigurationProperties',
    snippet: '@Component\n@ConfigurationProperties(prefix = "app")\npublic class AppProperties {\n    private String name;\n    private int port;\n    // getters and setters\n}',
    description: 'A powerful way to bind properties from configuration files to a structured Java object. It provides type-safe access to your application\'s configuration.',
    tags: ['springboot', 'properties', 'configuration', 'configurationproperties', 'type-safe'],
  },
  {
    id: 'springboot-8',
    category: 'SpringBoot',
    subCategory: 'java',
    title: 'Spring Boot Actuator',
    snippet: '<!-- pom.xml -->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-actuator</artifactId>\n</dependency>\n\n# application.properties\nmanagement.endpoints.web.exposure.include=health,info,metrics',
    description: 'Actuator brings production-ready features to our application. It exposes endpoints (like /actuator/health) to monitor and manage the application, view metrics, understand traffic, and more.',
    tags: ['springboot', 'actuator', 'monitoring', 'health', 'metrics', 'production'],
  },
  {
    id: 'springboot-9',
    category: 'SpringBoot',
    subCategory: 'java',
    title: 'CommandLineRunner',
    snippet: '@Component\npublic class MyRunner implements CommandLineRunner {\n    @Override\n    public void run(String... args) throws Exception {\n        // Code to be executed on application startup\n        System.out.println("Application has started!");\n    }\n}',
    description: 'An interface used to indicate that a bean should run some code when it is contained within a SpringApplication. It is called after the application context is loaded.',
    tags: ['springboot', 'startup', 'commandlinerunner', 'initialization'],
  },
  {
    id: 'springboot-10',
    category: 'SpringBoot',
    subCategory: 'java',
    title: 'Spring Boot DevTools',
    snippet: '<!-- pom.xml -->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-devtools</artifactId>\n    <scope>runtime</scope>\n    <optional>true</optional>\n</dependency>',
    description: 'Provides features to improve the development experience, including automatic application restart when files change on the classpath and live reload for browsers.',
    tags: ['springboot', 'devtools', 'hot-reload', 'development', 'productivity'],
  },
  {
    id: 'springboot-11',
    category: 'SpringBoot',
    subCategory: 'java',
    title: '@MockBean',
    snippet: '@SpringBootTest\nclass MyServiceTest {\n    @Autowired\n    private MyService myService;\n\n    @MockBean\n    private ExternalDependency externalDependency;\n\n    @Test\n    void someTest() {\n        // Mock the behavior of the external dependency\n        given(externalDependency.doSomething()).willReturn("mocked value");\n\n        // Test myService, which uses the mocked dependency\n    }\n}',
    description: 'Used in tests to add a mock of a specific bean to the ApplicationContext. It replaces any existing bean of the same type with a Mockito mock.',
    tags: ['springboot', 'test', 'mock', 'mockbean', 'mockito'],
  },
  {
    id: 'springboot-12',
    category: 'SpringBoot',
    subCategory: 'java',
    title: '@ActiveProfiles',
    snippet: '@SpringBootTest\n@ActiveProfiles("test")\nclass ApplicationTest {\n    // This test will run with the "test" profile active\n    // and load application-test.properties\n}',
    description: 'A test annotation that is used to declare which active bean definition profiles should be used when loading an ApplicationContext for test classes.',
    tags: ['springboot', 'test', 'profile', 'activeprofiles', 'configuration'],
  },
  {
    id: 'springboot-13',
    category: 'SpringBoot',
    subCategory: 'java',
    title: '@AutoConfigureMockMvc',
    snippet: '@SpringBootTest\n@AutoConfigureMockMvc\nclass MyControllerIntegrationTest {\n    @Autowired\n    private MockMvc mockMvc;\n\n    @Test\n    void testEndpoint() throws Exception {\n        mockMvc.perform(get("/my-endpoint"))\n               .andExpect(status().isOk());\n    }\n}',
    description: 'Annotation that can be applied to a test class to enable and configure auto-configuration of MockMvc. Ideal for writing integration tests for your controllers without starting a full HTTP server.',
    tags: ['springboot', 'test', 'mockmvc', 'integration-test', 'autoconfiguremockmvc'],
  },
];
