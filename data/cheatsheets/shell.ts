import { CheatSheet } from '../../types';

export const shellCheatSheets: CheatSheet[] = [
  {
    id: 'shell-1',
    category: 'Command Line',
    subCategory: 'bash',
    title: 'Find Files by Name',
    snippet: 'find . -name "*.log"',
    description: 'Searches the current directory and subdirectories for files with a `.log` extension.',
    tags: ['shell', 'bash', 'find', 'files', 'search'],
  },
  {
    id: 'shell-2',
    category: 'Command Line',
    subCategory: 'bash',
    title: 'Grep for Text in Files',
    snippet: 'grep -r "error" /var/log/',
    description: 'Recursively searches for the string "error" in all files under the `/var/log/` directory.',
    tags: ['shell', 'bash', 'grep', 'text search', 'log'],
  },
  {
    id: 'shell-3',
    category: 'Command Line',
    subCategory: 'bash',
    title: 'List Files and Directories',
    snippet: 'ls -lAh',
    description: 'Lists files and directories in a long format (`-l`), including hidden files (`-A`), with human-readable file sizes (`-h`).',
    tags: ['shell', 'bash', 'ls', 'files', 'list'],
  },
  {
    id: 'shell-4',
    category: 'Command Line',
    subCategory: 'bash',
    title: 'Copy Files and Directories',
    snippet: 'cp source.txt destination.txt\ncp -r source_dir/ destination_dir/',
    description: 'Copies a file to a new location. Use the `-r` (recursive) flag to copy a directory and its contents.',
    tags: ['shell', 'bash', 'cp', 'copy', 'files', 'directory'],
  },
  {
    id: 'shell-5',
    category: 'Command Line',
    subCategory: 'bash',
    title: 'Move or Rename Files',
    snippet: 'mv old_name.txt new_name.txt\nmv file.txt ./new_directory/',
    description: 'Renames a file or moves it to a different directory.',
    tags: ['shell', 'bash', 'mv', 'move', 'rename'],
  },
  {
    id: 'shell-6',
    category: 'Command Line',
    subCategory: 'bash',
    title: 'Remove Files and Directories',
    snippet: 'rm file.txt\nrm -rf directory/',
    description: 'Deletes a file. Use `-r` (recursive) to delete a directory and `-f` (force) to bypass prompts. Use with extreme caution.',
    tags: ['shell', 'bash', 'rm', 'delete', 'remove'],
  },
  {
    id: 'shell-7',
    category: 'Command Line',
    subCategory: 'bash',
    title: 'Change File Permissions',
    snippet: 'chmod 755 script.sh',
    description: 'Changes the permissions of a file. `755` grants read, write, and execute permissions to the owner, and read/execute to group and others. Commonly used for scripts.',
    tags: ['shell', 'bash', 'chmod', 'permissions', 'security'],
  },
  {
    id: 'shell-8',
    category: 'Command Line',
    subCategory: 'bash',
    title: 'View File Content',
    snippet: 'cat file.txt\nless file.txt',
    description: '`cat` displays the entire content of a file at once. `less` displays it one page at a time, allowing for scrolling.',
    tags: ['shell', 'bash', 'cat', 'less', 'view', 'file'],
  },
  {
    id: 'shell-9',
    category: 'Command Line',
    subCategory: 'bash',
    title: 'Piping and Redirection',
    snippet: 'ls -l | grep ".txt"\ncat file.txt > new_file.txt',
    description: 'The pipe `|` sends the output of one command as input to another. The `>` redirects command output to a file, overwriting it. `>>` appends instead.',
    tags: ['shell', 'bash', 'pipe', 'redirect', 'output', 'input'],
  },
  {
    id: 'shell-10',
    category: 'Command Line',
    subCategory: 'bash',
    title: 'Check Running Processes',
    snippet: 'ps aux | grep "nginx"',
    description: '`ps aux` lists all running processes. This is often piped to `grep` to find a specific process.',
    tags: ['shell', 'bash', 'ps', 'process', 'task', 'check'],
  },
  {
    id: 'shell-11',
    category: 'Command Line',
    subCategory: 'bash',
    title: 'Terminate a Process',
    snippet: 'kill 12345\nkillall node',
    description: '`kill` sends a signal to a process by its ID (PID). `killall` sends a signal to all processes with a given name.',
    tags: ['shell', 'bash', 'kill', 'terminate', 'stop', 'process'],
  },
  {
    id: 'shell-12',
    category: 'Command Line',
    subCategory: 'bash',
    title: 'Download File from URL',
    snippet: 'curl -O https://example.com/file.zip\nwget https://example.com/file.zip',
    description: '`curl` and `wget` are command-line tools for transferring data with URLs. `-O` tells curl to save the output to a file with the same name.',
    tags: ['shell', 'bash', 'curl', 'wget', 'download', 'network'],
  },
  {
    id: 'shell-13',
    category: 'Command Line',
    subCategory: 'bash',
    title: 'Secure Shell (SSH) Connection',
    snippet: 'ssh user@hostname',
    description: 'Connects to a remote server securely over the network. It allows you to execute commands on the remote machine.',
    tags: ['shell', 'bash', 'ssh', 'remote', 'server', 'network'],
  },
  {
    id: 'shell-14',
    category: 'Command Line',
    subCategory: 'bash',
    title: 'Archive and Extract with Tar',
    snippet: '# Create archive\ntar -czvf archive.tar.gz /path/to/dir\n# Extract archive\ntar -xzvf archive.tar.gz',
    description: 'The `tar` command is used to create and extract `.tar.gz` archives. `c`=create, `x`=extract, `z`=gzip, `v`=verbose, `f`=file.',
    tags: ['shell', 'bash', 'tar', 'archive', 'compress', 'extract'],
  },
  {
    id: 'shell-15',
    category: 'Command Line',
    subCategory: 'bash',
    title: 'Check Disk Usage',
    snippet: 'df -h\ndu -sh /path/to/dir',
    description: '`df -h` shows overall disk space usage for all filesystems in a human-readable format. `du -sh` shows the total size of a specific directory.',
    tags: ['shell', 'bash', 'df', 'du', 'disk', 'space', 'usage'],
  },
  {
    id: 'shell-16',
    category: 'Command Line',
    subCategory: 'bash',
    title: 'Scripting: Variables',
    snippet: 'NAME="World"\necho "Hello, $NAME!"',
    description: 'Assign a value to a variable and reference it using the `$` prefix. Strings with spaces must be quoted.',
    tags: ['shell', 'bash', 'scripting', 'variable', 'echo'],
  },
  {
    id: 'shell-17',
    category: 'Command Line',
    subCategory: 'bash',
    title: 'Scripting: For Loop',
    snippet: 'for i in {1..5}; do\n  echo "Welcome $i"\ndone',
    description: 'Executes a sequence of commands for each item in a list. This example iterates from 1 to 5.',
    tags: ['shell', 'bash', 'scripting', 'loop', 'for', 'iteration'],
  },
  {
    id: 'shell-18',
    category: 'Command Line',
    subCategory: 'bash',
    title: 'Scripting: If-Else Statement',
    snippet: 'COUNT=10\nif [ $COUNT -eq 10 ]; then\n  echo "Count is 10."\nelse\n  echo "Count is not 10."\nfi',
    description: 'Executes commands based on a condition. `-eq` checks for equality. Other operators include `-ne` (not equal), `-gt` (greater than), `-lt` (less than).',
    tags: ['shell', 'bash', 'scripting', 'if', 'else', 'conditional'],
  },
  {
    id: 'shell-19',
    category: 'Command Line',
    subCategory: 'bash',
    title: 'Scripting: Read User Input',
    snippet: 'echo "What is your name?"\nread NAME\necho "Hello, $NAME."',
    description: 'The `read` command pauses the script and waits for the user to type something and press Enter.',
    tags: ['shell', 'bash', 'scripting', 'read', 'input', 'user'],
  },
  {
    id: 'shell-20',
    category: 'Command Line',
    subCategory: 'bash',
    title: 'Scripting: Functions',
    snippet: 'greet() {\n  echo "Hello, $1!"\n}\n\ngreet "World"',
    description: 'Define a reusable block of code. `$1` refers to the first argument passed to the function.',
    tags: ['shell', 'bash', 'scripting', 'function', 'reusable'],
  },
  {
    id: 'shell-21',
    category: 'Command Line',
    subCategory: 'bash',
    title: 'Search and Replace with Sed',
    snippet: "sed 's/old_text/new_text/g' file.txt",
    description: 'The stream editor (`sed`) is powerful for find-and-replace operations. The `s` command substitutes text, and the `g` flag applies it globally on each line.',
    tags: ['shell', 'bash', 'sed', 'replace', 'text processing'],
  },
  {
    id: 'shell-22',
    category: 'Command Line',
    subCategory: 'bash',
    title: 'Process Text with Awk',
    snippet: "awk '{print $1, $3}' data.txt",
    description: '`awk` is a versatile programming language for working on files. This example prints the first and third columns (fields) of `data.txt`.',
    tags: ['shell', 'bash', 'awk', 'text processing', 'columns'],
  },
  {
    id: 'shell-23',
    category: 'Command Line',
    subCategory: 'bash',
    title: 'Execute Command on Multiple Files',
    snippet: 'find . -name "*.js" | xargs rm',
    description: '`xargs` builds and executes commands from standard input. This example finds all `.js` files and passes them to `rm` for deletion.',
    tags: ['shell', 'bash', 'xargs', 'find', 'batch', 'files'],
  },
  {
    id: 'shell-24',
    category: 'Command Line',
    subCategory: 'bash',
    title: 'Create Command Alias',
    snippet: 'alias ll="ls -lAh"',
    description: 'Creates a shortcut for a longer command. Add this to your `~/.bashrc` or `~/.zshrc` to make it permanent.',
    tags: ['shell', 'bash', 'alias', 'shortcut', 'productivity'],
  },
  {
    id: 'shell-25',
    category: 'Command Line',
    subCategory: 'bash',
    title: 'Shebang and Script Execution',
    snippet: '#!/bin/bash\necho "Hello from a script!"',
    description: 'The shebang (`#!`) at the beginning of a script tells the system which interpreter to use. Make the script executable (`chmod +x script.sh`) and run it (`./script.sh`).',
    tags: ['shell', 'bash', 'scripting', 'shebang', 'executable'],
  },
  {
    id: 'shell-26',
    category: 'Command Line',
    subCategory: 'bash',
    title: 'Check Last Command Exit Status',
    snippet: 'grep "error" file.log\nif [ $? -ne 0 ]; then\n  echo "No errors found."\nfi',
    description: 'The special variable `$?` holds the exit status of the previously executed command. A value of `0` means success, while any other value indicates an error.',
    tags: ['shell', 'bash', 'scripting', 'exit status', 'error handling'],
  },
  {
    id: 'shell-27',
    category: 'Command Line',
    subCategory: 'bash',
    title: 'Count Lines, Words, and Characters',
    snippet: 'wc -l file.txt\nwc -w file.txt\nwc -c file.txt',
    description: 'The `wc` (word count) command can count lines (`-l`), words (`-w`), or characters/bytes (`-c`) in a file or from standard input.',
    tags: ['shell', 'bash', 'wc', 'count', 'lines', 'words'],
  },
  {
    id: 'shell-28',
    category: 'Command Line',
    subCategory: 'bash',
    title: 'View Command History',
    snippet: 'history\n!123',
    description: '`history` displays a list of recently used commands. `!123` will re-execute the command with the number 123 from the history list.',
    tags: ['shell', 'bash', 'history', 'command', 'recall'],
  },
  {
    id: 'shell-29',
    category: 'Command Line',
    subCategory: 'bash',
    title: 'Background a Process',
    snippet: 'long-running-command &',
    description: 'Appending `&` to a command runs it in the background, immediately returning control of the terminal to you. Use `jobs` to see background processes.',
    tags: ['shell', 'bash', 'background', 'process', 'jobs', 'multitasking'],
  },
  {
    id: 'shell-30',
    category: 'Command Line',
    subCategory: 'bash',
    title: 'Command Substitution',
    snippet: 'echo "Today is $(date)"',
    description: 'Command substitution `$(...)` allows the output of a command to replace the command itself. It is used to capture command output into a variable or use it in another command.',
    tags: ['shell', 'bash', 'scripting', 'command substitution', 'variable'],
  },
  {
    id: 'shell-31',
    category: 'Command Line',
    subCategory: 'bash',
    title: 'Execute as Superuser',
    snippet: 'sudo apt-get update',
    description: '`sudo` (superuser do) allows a permitted user to execute a command as the superuser or another user, as specified by the security policy. It is commonly used for system administration tasks.',
    tags: ['shell', 'bash', 'sudo', 'admin', 'root', 'permissions'],
  },
];