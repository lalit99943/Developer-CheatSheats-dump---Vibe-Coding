import { CheatSheet } from '../../types';

export const npmCheatSheets: CheatSheet[] = [
  {
    id: 'npm-1',
    category: 'NPM',
    subCategory: 'bash',
    title: 'Initialize a Project',
    snippet: 'npm init -y',
    description: 'Creates a `package.json` file in the current directory. The `-y` flag accepts the default options.',
    tags: ['npm', 'init', 'package.json', 'setup'],
  },
  {
    id: 'npm-2',
    category: 'NPM',
    subCategory: 'bash',
    title: 'Install a Package',
    snippet: 'npm install <package-name>\n# Shortcut: npm i <package-name>',
    description: 'Downloads a package and its dependencies from the registry and adds it to your `node_modules` directory and `package.json` file.',
    tags: ['npm', 'install', 'dependencies', 'package'],
  },
  {
    id: 'npm-3',
    category: 'NPM',
    subCategory: 'bash',
    title: 'Install a Development Dependency',
    snippet: 'npm install --save-dev <package-name>\n# Shortcut: npm i -D <package-name>',
    description: 'Installs a package that is only needed for local development and testing (e.g., a linter or testing library). It is added to `devDependencies` in `package.json`.',
    tags: ['npm', 'install', 'dev-dependencies', 'development'],
  },
  {
    id: 'npm-4',
    category: 'NPM',
    subCategory: 'bash',
    title: 'Install a Package Globally',
    snippet: 'npm install --global <package-name>\n# Shortcut: npm i -g <package-name>',
    description: 'Installs a package globally on your system, making its command-line tools accessible from any directory (e.g., `typescript`, `nodemon`).',
    tags: ['npm', 'install', 'global', 'cli', 'tools'],
  },
  {
    id: 'npm-5',
    category: 'NPM',
    subCategory: 'bash',
    title: 'Uninstall a Package',
    snippet: 'npm uninstall <package-name>\n# Shortcut: npm un <package-name>',
    description: 'Removes a package from `node_modules` and updates your `package.json` and `package-lock.json` files.',
    tags: ['npm', 'uninstall', 'remove', 'dependencies'],
  },
  {
    id: 'npm-6',
    category: 'NPM',
    subCategory: 'bash',
    title: 'Update Packages',
    snippet: 'npm update',
    description: 'Updates all the packages listed in `package.json` to the latest version that satisfies the semantic versioning rules specified.',
    tags: ['npm', 'update', 'dependencies', 'version'],
  },
  {
    id: 'npm-7',
    category: 'NPM',
    subCategory: 'bash',
    title: 'List Installed Packages',
    snippet: 'npm list\nnpm list --depth=0',
    description: 'Lists all installed packages in the current project. Use `--depth=0` to only show top-level packages.',
    tags: ['npm', 'list', 'ls', 'dependencies'],
  },
  {
    id: 'npm-8',
    category: 'NPM',
    subCategory: 'bash',
    title: 'Run a Script',
    snippet: 'npm run <script-name>',
    description: 'Executes a script defined in the `scripts` section of your `package.json` file.',
    tags: ['npm', 'run', 'scripts', 'package.json'],
  },
  {
    id: 'npm-9',
    category: 'NPM',
    subCategory: 'bash',
    title: 'Clean Install (CI)',
    snippet: 'npm ci',
    description: 'Deletes `node_modules` and performs a clean install of dependencies exactly as specified in `package-lock.json`. It is faster and more reliable for CI/CD environments.',
    tags: ['npm', 'ci', 'install', 'continuous integration', 'lockfile'],
  },
  {
    id: 'npm-10',
    category: 'NPM',
    subCategory: 'bash',
    title: 'Check for Outdated Packages',
    snippet: 'npm outdated',
    description: 'Checks the registry to see if any of your installed packages are currently outdated.',
    tags: ['npm', 'outdated', 'dependencies', 'version', 'check'],
  },
  {
    id: 'npm-11',
    category: 'NPM',
    subCategory: 'bash',
    title: 'View Package Information',
    snippet: 'npm view <package-name>',
    description: 'Displays detailed information about a package from the npm registry, including its versions, dependencies, and keywords, without installing it.',
    tags: ['npm', 'view', 'info', 'package', 'registry'],
  },
];