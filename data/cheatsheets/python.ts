import { CheatSheet } from '../../types';

export const pythonCheatSheets: CheatSheet[] = [
  {
    id: 'python-1',
    category: 'Python',
    subCategory: 'python',
    title: 'List Comprehension',
    snippet: 'squares = [x**2 for x in range(10)]',
    description: 'A concise way to create lists. It provides a shorter syntax when you want to create a new list based on the values of an existing iterable.',
    tags: ['python', 'list comprehension', 'data structures'],
  },
  {
    id: 'python-2',
    category: 'Python',
    subCategory: 'python',
    title: 'Read a File',
    snippet: "with open('myfile.txt', 'r') as f:\n    content = f.read()",
    description: 'Safely opens, reads the entire content of a file, and automatically closes it. Using `with` ensures the file is closed even if errors occur.',
    tags: ['python', 'file io', 'read file', 'with statement'],
  },
  {
    id: 'python-3',
    category: 'Python',
    subCategory: 'python',
    title: 'Dictionary Comprehension',
    snippet: 'squares_dict = {x: x**2 for x in range(5)}',
    description: 'A concise way to create dictionaries from iterables, similar to list comprehensions.',
    tags: ['python', 'dictionary comprehension', 'data structures', 'dict'],
  },
  {
    id: 'python-4',
    category: 'Python',
    subCategory: 'python',
    title: 'Write to a File',
    snippet: "with open('myfile.txt', 'w') as f:\n    f.write('Hello, World!')",
    description: 'Safely opens a file for writing and automatically closes it. The \'w\' mode overwrites the file if it exists.',
    tags: ['python', 'file io', 'write file', 'with statement'],
  },
  {
    id: 'python-5',
    category: 'Python',
    subCategory: 'python',
    title: 'Function with Default Arguments',
    snippet: 'def greet(name, greeting="Hello"):\n    print(f"{greeting}, {name}!")',
    description: 'Defines a function where some parameters have default values, making them optional when the function is called.',
    tags: ['python', 'function', 'arguments', 'default value'],
  },
  {
    id: 'python-6',
    category: 'Python',
    subCategory: 'python',
    title: 'Basic Class Definition',
    snippet: 'class Dog:\n    def __init__(self, name):\n        self.name = name\n\n    def bark(self):\n        return f"{self.name} says woof!"',
    description: 'Defines a simple class with a constructor (`__init__`) to initialize its attributes and a method to define its behavior.',
    tags: ['python', 'class', 'oop', 'object', '__init__'],
  },
  {
    id: 'python-7',
    category: 'Python',
    subCategory: 'python',
    title: 'F-String Formatting',
    snippet: 'name = "Alice"\nage = 30\nprint(f"My name is {name} and I am {age} years old.")',
    description: 'Formatted string literals (f-strings) provide a concise and convenient way to embed expressions inside string literals for formatting.',
    tags: ['python', 'string', 'formatting', 'f-string'],
  },
  {
    id: 'python-8',
    category: 'Python',
    subCategory: 'python',
    title: 'Exception Handling (try-except)',
    snippet: 'try:\n    result = 10 / 0\nexcept ZeroDivisionError:\n    print("Cannot divide by zero!")\nfinally:\n    print("Execution finished.")',
    description: 'Handles potential errors in your code. The `try` block contains code that might raise an exception, `except` catches it, and `finally` always executes.',
    tags: ['python', 'exception', 'error handling', 'try', 'except', 'finally'],
  },
  {
    id: 'python-9',
    category: 'Python',
    subCategory: 'python',
    title: 'Working with JSON',
    snippet: 'import json\n\ndata = {"name": "John", "age": 30}\n\n# Convert dict to JSON string\njson_string = json.dumps(data)\n\n# Convert JSON string to dict\nparsed_data = json.loads(json_string)',
    description: 'Use the `json` module to encode Python dictionaries into JSON strings (`dumps`) and decode JSON strings back into Python dictionaries (`loads`).',
    tags: ['python', 'json', 'serialization', 'deserialization', 'data'],
  },
  {
    id: 'python-10',
    category: 'Python',
    subCategory: 'bash',
    title: 'Create a Virtual Environment',
    snippet: '# Create a virtual environment named "venv"\npython3 -m venv venv\n\n# Activate the virtual environment\nsource venv/bin/activate  # On Linux/macOS\n.\\venv\\Scripts\\activate  # On Windows',
    description: 'Isolates project dependencies. Creating and activating a virtual environment is a best practice for Python development.',
    tags: ['python', 'venv', 'virtual environment', 'dependency management'],
  },
  {
    id: 'python-11',
    category: 'Python',
    subCategory: 'bash',
    title: 'Install Packages with Pip',
    snippet: '# Install a package\npip install requests\n\n# Install from a requirements file\npip install -r requirements.txt\n\n# Freeze dependencies to a file\npip freeze > requirements.txt',
    description: '`pip` is the package installer for Python. You can use it to install packages from the Python Package Index (PyPI) and manage project dependencies.',
    tags: ['python', 'pip', 'package management', 'dependencies', 'requests'],
  },
  {
    id: 'python-12',
    category: 'Python',
    subCategory: 'python',
    title: 'List Slicing',
    snippet: 'my_list = [0, 1, 2, 3, 4, 5]\n\nfirst_three = my_list[0:3]  # [0, 1, 2]\nfrom_index_2 = my_list[2:]   # [2, 3, 4, 5]\nlast_two = my_list[-2:]      # [4, 5]',
    description: 'Access a range of elements in a list (or other sequence types) using the slice syntax `[start:stop:step]`.',
    tags: ['python', 'list', 'slicing', 'sequence', 'data structures'],
  },
  {
    id: 'python-13',
    category: 'Python',
    subCategory: 'python',
    title: 'Iterating Over Dictionaries',
    snippet: 'my_dict = {"a": 1, "b": 2}\n\nfor key, value in my_dict.items():\n    print(f"Key: {key}, Value: {value}")',
    description: 'The `.items()` method returns a view object that displays a list of a given dictionary\'s key-value tuple pairs, which is convenient for looping.',
    tags: ['python', 'dictionary', 'loop', 'iteration', 'items'],
  },
  {
    id: 'python-14',
    category: 'Python',
    subCategory: 'python',
    title: 'Main Execution Block',
    snippet: 'def main():\n    print("This is the main function.")\n\nif __name__ == "__main__":\n    main()',
    description: 'The `if __name__ == "__main__"` block ensures that the code inside it only runs when the script is executed directly (not when it\'s imported as a module).',
    tags: ['python', 'script', 'module', '__main__', 'best practice'],
  },
  {
    id: 'python-15',
    category: 'Python',
    subCategory: 'python',
    title: 'Function with *args and **kwargs',
    snippet: `def my_function(*args, **kwargs):
    print("Positional args:", args)
    print("Keyword args:", kwargs)

my_function(1, 2, 'hello', name='Alice', age=30)
# Positional args: (1, 2, 'hello')
# Keyword args: {'name': 'Alice', 'age': 30}`,
    description: '`*args` collects all extra positional arguments into a tuple. `**kwargs` collects all extra keyword arguments into a dictionary. This allows a function to accept a variable number of arguments.',
    tags: ['python', 'function', 'arguments', 'args', 'kwargs', 'variadic'],
  },
];