import { CheatSheet } from '../../types';

export const java8CheatSheets: CheatSheet[] = [
  {
    id: 'java8-1',
    category: 'Java 8',
    subCategory: 'java',
    title: 'Lambda Expression Basics',
    snippet: '// Old way:\nRunnable oldRunnable = new Runnable(){\n    @Override\n    public void run(){\n        System.out.println("Old Way!");\n    }\n};\n\n// Java 8 way:\nRunnable newRunnable = () -> System.out.println("New Way!");',
    description: 'A short block of code which takes in parameters and returns a value. Lambda expressions are similar to methods, but they do not need a name and they can be implemented right in the body of a method.',
    tags: ['java8', 'lambda', 'functional programming'],
  },
  {
    id: 'java8-2',
    category: 'Java 8',
    subCategory: 'java',
    title: 'Stream API: Filter',
    snippet: 'List<String> list = Arrays.asList("java", "python", "c++");\nList<String> result = list.stream()\n                         .filter(s -> s.startsWith("j"))\n                         .collect(Collectors.toList());',
    description: 'The `filter` method is an intermediate operation that returns a new stream consisting of the elements that match a given predicate (a boolean-valued function).',
    tags: ['java8', 'stream', 'filter', 'collections'],
  },
  {
    id: 'java8-3',
    category: 'Java 8',
    subCategory: 'java',
    title: 'Stream API: Map',
    snippet: 'List<String> list = Arrays.asList("java", "python", "c++");\nList<String> result = list.stream()\n                         .map(String::toUpperCase)\n                         .collect(Collectors.toList());',
    description: 'The `map` method is an intermediate operation that returns a stream consisting of the results of applying the given function to the elements of this stream.',
    tags: ['java8', 'stream', 'map', 'transform', 'collections'],
  },
  {
    id: 'java8-4',
    category: 'Java 8',
    subCategory: 'java',
    title: 'Stream API: Collect',
    snippet: 'List<String> list = ...;\nSet<String> set = list.stream().collect(Collectors.toSet());\nMap<String, Integer> map = list.stream().collect(Collectors.toMap(s -> s, String::length));',
    description: 'The `collect` method is a terminal operation that performs a mutable reduction operation on the elements of this stream using a Collector. It is used to get the stream elements into a List, Set, or Map.',
    tags: ['java8', 'stream', 'collect', 'terminal', 'collections'],
  },
  {
    id: 'java8-5',
    category: 'Java 8',
    subCategory: 'java',
    title: 'Stream API: forEach',
    snippet: 'List<String> list = Arrays.asList("a", "b", "c");\nlist.stream().forEach(System.out::println);',
    description: 'The `forEach` method is a terminal operation that performs an action for each element of this stream. It is a simple way to iterate over a stream.',
    tags: ['java8', 'stream', 'foreach', 'iteration'],
  },
  {
    id: 'java8-6',
    category: 'Java 8',
    subCategory: 'java',
    title: 'Optional Class',
    snippet: 'Optional<String> optional = Optional.ofNullable(someMethodThatCouldReturnNull());\nString value = optional.orElse("default value");',
    description: 'A container object which may or may not contain a non-null value. `Optional` is a public final class and used to deal with `NullPointerException` in Java application.',
    tags: ['java8', 'optional', 'nullpointerexception', 'npe'],
  },
  {
    id: 'java8-7',
    category: 'Java 8',
    subCategory: 'java',
    title: 'Default Methods in Interfaces',
    snippet: 'interface MyInterface {\n    void regularMethod();\n    default void defaultMethod() {\n        System.out.println("This is a default method.");\n    }\n}',
    description: 'Default methods enable you to add new functionality to existing interfaces without breaking older implementations of these interfaces.',
    tags: ['java8', 'interface', 'default method', 'evolution'],
  },
  {
    id: 'java8-8',
    category: 'Java 8',
    subCategory: 'java',
    title: 'Method References',
    snippet: 'List<String> list = ...;\n// Instead of s -> s.toUpperCase()\nlist.stream().map(String::toUpperCase);',
    description: 'Method references are a special type of lambda expression. They are often used to create simple lambda expressions by referencing existing methods. They can make the code more readable.',
    tags: ['java8', 'method reference', 'lambda', 'shorthand'],
  },
  {
    id: 'java8-9',
    category: 'Java 8',
    subCategory: 'java',
    title: 'Stream API: findFirst',
    snippet: 'List<String> list = Arrays.asList("apple", "banana", "apricot");\nOptional<String> firstA = list.stream()\n                             .filter(s -> s.startsWith("a"))\n                             .findFirst();',
    description: '`findFirst` is a terminal operation that returns an `Optional` describing the first element of this stream, or an empty `Optional` if the stream is empty.',
    tags: ['java8', 'stream', 'findfirst', 'optional', 'terminal'],
  },
  {
    id: 'java8-10',
    category: 'Java 8',
    subCategory: 'java',
    title: 'Stream API: sorted',
    snippet: 'List<String> list = Arrays.asList("banana", "apple", "cherry");\nList<String> sortedList = list.stream()\n                               .sorted()\n                               .collect(Collectors.toList());',
    description: 'The `sorted` method is an intermediate operation that returns a stream consisting of the elements of this stream, sorted according to natural order.',
    tags: ['java8', 'stream', 'sorted', 'sort', 'order'],
  },
  {
    id: 'java8-11',
    category: 'Java 8',
    subCategory: 'java',
    title: 'Stream API: reduce',
    snippet: 'List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\nint sum = numbers.stream().reduce(0, (a, b) -> a + b);\n// Simpler version:\nint sum2 = numbers.stream().reduce(0, Integer::sum);',
    description: 'The `reduce` method is a terminal operation that performs a reduction on the elements of the stream, using an initial value and an associative accumulation function, and returns the reduced value.',
    tags: ['java8', 'stream', 'reduce', 'aggregate', 'sum'],
  },
  {
    id: 'java8-12',
    category: 'Java 8',
    subCategory: 'java',
    title: 'Functional Interfaces',
    snippet: '@FunctionalInterface\ninterface MyFunctionalInterface {\n    void execute();\n    // Only one abstract method is allowed\n}',
    description: 'An interface that has exactly one abstract method. The `@FunctionalInterface` annotation is optional but recommended. Lambdas can only be used with functional interfaces.',
    tags: ['java8', 'functional interface', 'lambda'],
  },
  {
    id: 'java8-13',
    category: 'Java 8',
    subCategory: 'java',
    title: 'Date-Time API: LocalDate',
    snippet: 'LocalDate today = LocalDate.now();\nLocalDate tomorrow = today.plusDays(1);\nint year = today.getYear();\nDayOfWeek day = today.getDayOfWeek();',
    description: '`LocalDate` is an immutable date-time object that represents a date, often viewed as year-month-day. It is part of the new, improved, and thread-safe Date-Time API.',
    tags: ['java8', 'date', 'time', 'localdate', 'datetime api'],
  },
  {
    id: 'java8-14',
    category: 'Java 8',
    subCategory: 'java',
    title: 'Date-Time API: LocalDateTime',
    snippet: 'LocalDateTime now = LocalDateTime.now();\nLocalDateTime specificDateTime = LocalDateTime.of(2024, Month.JULY, 20, 10, 30);',
    description: '`LocalDateTime` is an immutable date-time object that represents a date-time, often viewed as year-month-day-hour-minute-second.',
    tags: ['java8', 'date', 'time', 'localdatetime', 'datetime api'],
  },
  {
    id: 'java8-15',
    category: 'Java 8',
    subCategory: 'java',
    title: 'Date-Time API: Formatting',
    snippet: 'LocalDateTime now = LocalDateTime.now();\nDateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");\nString formattedDateTime = now.format(formatter);',
    description: 'The `DateTimeFormatter` class provides various predefined formats and allows for custom patterns to format and parse date-time objects.',
    tags: ['java8', 'date', 'time', 'format', 'datetimeformatter'],
  },
  {
    id: 'java8-16',
    category: 'Java 8',
    subCategory: 'java',
    title: 'Stream API: FlatMap',
    snippet: 'List<List<String>> listOfLists = Arrays.asList(Arrays.asList("a", "b"), Arrays.asList("c", "d"));\nList<String> flatList = listOfLists.stream()\n                                   .flatMap(Collection::stream)\n                                   .collect(Collectors.toList());\n// result: ["a", "b", "c", "d"]',
    description: 'The `flatMap` method is used to transform each element of a stream into another stream and then flatten the resulting streams into a single stream.',
    tags: ['java8', 'stream', 'flatmap', 'flatten', 'collections'],
  },
  {
    id: 'java8-17',
    category: 'Java 8',
    subCategory: 'java',
    title: 'Stream API: anyMatch, allMatch, noneMatch',
    snippet: 'boolean hasJ = list.stream().anyMatch(s -> s.startsWith("j"));\nboolean allShort = list.stream().allMatch(s -> s.length() < 10);\nboolean noZ = list.stream().noneMatch(s -> s.contains("z"));',
    description: 'These are terminal operations that take a predicate and return a boolean. `anyMatch` checks if at least one element matches, `allMatch` checks if all elements match, and `noneMatch` checks if no elements match.',
    tags: ['java8', 'stream', 'match', 'predicate', 'terminal'],
  },
  {
    id: 'java8-18',
    category: 'Java 8',
    subCategory: 'java',
    title: 'Stream API: groupingBy Collector',
    snippet: 'Map<Integer, List<String>> byLength = list.stream()\n    .collect(Collectors.groupingBy(String::length));',
    description: 'A powerful collector that groups elements of a stream into a Map based on a classification function.',
    tags: ['java8', 'stream', 'collect', 'groupingby', 'map'],
  },
];
