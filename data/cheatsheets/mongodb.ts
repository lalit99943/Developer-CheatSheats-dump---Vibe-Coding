import { CheatSheet } from '../../types';

export const mongoDbCheatSheets: CheatSheet[] = [
  {
    id: 'mongodb-1',
    category: 'MongoDB',
    subCategory: 'javascript',
    title: 'Insert a Single Document',
    snippet: 'db.collection.insertOne({ name: "Alice", age: 30, city: "New York" })',
    description: 'Inserts one document into a collection. If the collection does not exist, it will be created.',
    tags: ['mongodb', 'insert', 'create', 'write', 'document'],
  },
  {
    id: 'mongodb-2',
    category: 'MongoDB',
    subCategory: 'javascript',
    title: 'Insert Multiple Documents',
    snippet: 'db.collection.insertMany([\n  { name: "Bob", age: 25 },\n  { name: "Charlie", age: 35 }\n])',
    description: 'Inserts an array of documents into a collection.',
    tags: ['mongodb', 'insert', 'create', 'write', 'bulk'],
  },
  {
    id: 'mongodb-3',
    category: 'MongoDB',
    subCategory: 'javascript',
    title: 'Find One Document',
    snippet: 'db.collection.findOne({ name: "Alice" })',
    description: 'Retrieves the first document that matches the query criteria.',
    tags: ['mongodb', 'find', 'read', 'query', 'select'],
  },
  {
    id: 'mongodb-4',
    category: 'MongoDB',
    subCategory: 'javascript',
    title: 'Find Multiple Documents',
    snippet: 'db.collection.find({ age: { $gt: 28 } }).pretty()',
    description: 'Retrieves all documents that match the query criteria. The `.pretty()` method formats the output for easier reading.',
    tags: ['mongodb', 'find', 'read', 'query', 'select', 'filter'],
  },
  {
    id: 'mongodb-5',
    category: 'MongoDB',
    subCategory: 'javascript',
    title: 'Update a Single Document',
    snippet: 'db.collection.updateOne(\n  { name: "Alice" },\n  { $set: { city: "Boston" } }\n)',
    description: 'Updates the first document that matches the query. The `$set` operator modifies a field\'s value.',
    tags: ['mongodb', 'update', 'modify', 'write'],
  },
  {
    id: 'mongodb-6',
    category: 'MongoDB',
    subCategory: 'javascript',
    title: 'Update Multiple Documents',
    snippet: 'db.collection.updateMany(\n  { city: "New York" },\n  { $set: { country: "USA" } }\n)',
    description: 'Updates all documents that match the query criteria.',
    tags: ['mongodb', 'update', 'modify', 'write', 'bulk'],
  },
  {
    id: 'mongodb-7',
    category: 'MongoDB',
    subCategory: 'javascript',
    title: 'Delete a Single Document',
    snippet: 'db.collection.deleteOne({ name: "Charlie" })',
    description: 'Deletes the first document that matches the query.',
    tags: ['mongodb', 'delete', 'remove', 'write'],
  },
  {
    id: 'mongodb-8',
    category: 'MongoDB',
    subCategory: 'javascript',
    title: 'Delete Multiple Documents',
    snippet: 'db.collection.deleteMany({ age: { $lt: 30 } })',
    description: 'Deletes all documents that match the query criteria.',
    tags: ['mongodb', 'delete', 'remove', 'write', 'bulk'],
  },
  {
    id: 'mongodb-9',
    category: 'MongoDB',
    subCategory: 'javascript',
    title: 'Query with Logical AND',
    snippet: 'db.collection.find({ status: "A", age: { $lt: 30 } })',
    description: 'To specify a logical AND, provide a comma-separated list of expressions in the query document. This finds documents where status is "A" AND age is less than 30.',
    tags: ['mongodb', 'query', 'filter', 'and', 'logical'],
  },
  {
    id: 'mongodb-10',
    category: 'MongoDB',
    subCategory: 'javascript',
    title: 'Query with Logical OR',
    snippet: 'db.collection.find({ $or: [ { status: "A" }, { age: { $lt: 30 } } ] })',
    description: 'Use the `$or` operator to find documents that match at least one of the conditions in the array.',
    tags: ['mongodb', 'query', 'filter', 'or', 'logical'],
  },
  {
    id: 'mongodb-11',
    category: 'MongoDB',
    subCategory: 'javascript',
    title: 'Create an Index',
    snippet: 'db.collection.createIndex({ name: 1 })',
    description: 'Creates an index on a field to improve query performance. `1` specifies an ascending index, `-1` specifies a descending index.',
    tags: ['mongodb', 'index', 'performance', 'query'],
  },
  {
    id: 'mongodb-12',
    category: 'MongoDB',
    subCategory: 'javascript',
    title: 'Aggregation Pipeline',
    snippet: `db.orders.aggregate([\n  { $match: { status: "A" } },\n  { $group: { _id: "$cust_id", total: { $sum: "$amount" } } },\n  { $sort: { total: -1 } }\n])`,
    description: 'Processes documents through a multi-stage pipeline. This example filters orders by status, groups them by customer ID while summing the amount, and then sorts the results.',
    tags: ['mongodb', 'aggregate', 'pipeline', 'group', 'match', 'sort'],
  },
  {
    id: 'mongodb-13',
    category: 'MongoDB',
    subCategory: 'javascript',
    title: 'Query with Projection',
    snippet: 'db.users.find(\n  { status: "A" },\n  { name: 1, email: 1, _id: 0 }\n)',
    description: 'Projection is used to specify which fields to include or exclude in the returned documents. `1` means include the field, and `0` means exclude it. By default, `_id` is always included unless explicitly excluded.',
    tags: ['mongodb', 'query', 'find', 'projection', 'select', 'fields'],
  },
];