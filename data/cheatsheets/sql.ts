import { CheatSheet } from '../../types';

export const sqlCheatSheets: CheatSheet[] = [
  {
    id: 'sql-1',
    category: 'SQL',
    subCategory: 'sql',
    title: 'SELECT Statement',
    snippet: "SELECT column1, column2 FROM table_name WHERE condition;",
    description: 'Retrieves data from one or more columns in a database table, optionally filtering rows based on a condition.',
    tags: ['sql', 'select', 'query', 'database', 'dql'],
  },
  {
    id: 'sql-2',
    category: 'SQL',
    subCategory: 'sql',
    title: 'INNER JOIN',
    snippet: 'SELECT o.OrderID, c.CustomerName\nFROM Orders AS o\nINNER JOIN Customers AS c ON o.CustomerID = c.CustomerID;',
    description: 'Selects records that have matching values in both tables. It is the most common type of join.',
    tags: ['sql', 'join', 'inner join', 'database', 'query'],
  },
  {
    id: 'sql-3',
    category: 'SQL',
    subCategory: 'sql',
    title: 'INSERT INTO Statement',
    snippet: "INSERT INTO table_name (column1, column2, column3)\nVALUES (value1, value2, value3);",
    description: 'Adds a new row of data to a table.',
    tags: ['sql', 'insert', 'dml', 'data manipulation'],
  },
  {
    id: 'sql-4',
    category: 'SQL',
    subCategory: 'sql',
    title: 'UPDATE Statement',
    snippet: "UPDATE table_name\nSET column1 = value1, column2 = value2\nWHERE condition;",
    description: 'Modifies existing records in a table that match the specified condition.',
    tags: ['sql', 'update', 'dml', 'modify', 'data manipulation'],
  },
  {
    id: 'sql-5',
    category: 'SQL',
    subCategory: 'sql',
    title: 'DELETE Statement',
    snippet: "DELETE FROM table_name WHERE condition;",
    description: 'Removes records from a table that match the specified condition. Be careful with this command!',
    tags: ['sql', 'delete', 'dml', 'remove', 'data manipulation'],
  },
  {
    id: 'sql-6',
    category: 'SQL',
    subCategory: 'sql',
    title: 'SELECT DISTINCT',
    snippet: "SELECT DISTINCT Country FROM Customers;",
    description: 'Returns only unique (distinct) values from a specified column.',
    tags: ['sql', 'select', 'distinct', 'unique'],
  },
  {
    id: 'sql-7',
    category: 'SQL',
    subCategory: 'sql',
    title: 'ORDER BY',
    snippet: "SELECT * FROM Products\nORDER BY Price ASC, ProductName DESC;",
    description: 'Sorts the result set in ascending (ASC) or descending (DESC) order based on one or more columns.',
    tags: ['sql', 'order by', 'sort', 'query'],
  },
  {
    id: 'sql-8',
    category: 'SQL',
    subCategory: 'sql',
    title: 'Aggregate Functions (COUNT, SUM, AVG)',
    snippet: "SELECT COUNT(ProductID), AVG(Price), SUM(Quantity)\nFROM Products;",
    description: 'Performs a calculation on a set of values and returns a single value. Common functions include COUNT, SUM, AVG, MIN, and MAX.',
    tags: ['sql', 'aggregate', 'count', 'sum', 'avg'],
  },
  {
    id: 'sql-9',
    category: 'SQL',
    subCategory: 'sql',
    title: 'GROUP BY',
    snippet: "SELECT COUNT(CustomerID), Country\nFROM Customers\nGROUP BY Country;",
    description: 'Groups rows that have the same values in specified columns into summary rows. It is often used with aggregate functions.',
    tags: ['sql', 'group by', 'aggregate', 'summary'],
  },
  {
    id: 'sql-10',
    category: 'SQL',
    subCategory: 'sql',
    title: 'HAVING Clause',
    snippet: "SELECT COUNT(CustomerID), Country\nFROM Customers\nGROUP BY Country\nHAVING COUNT(CustomerID) > 5;",
    description: 'Filters the results of a GROUP BY clause. While WHERE filters rows, HAVING filters groups.',
    tags: ['sql', 'having', 'group by', 'filter', 'aggregate'],
  },
  {
    id: 'sql-11',
    category: 'SQL',
    subCategory: 'sql',
    title: 'LEFT JOIN',
    snippet: 'SELECT c.CustomerName, o.OrderID\nFROM Customers c\nLEFT JOIN Orders o ON c.CustomerID = o.CustomerID;',
    description: 'Returns all records from the left table (Customers), and the matched records from the right table (Orders). The result is NULL from the right side if there is no match.',
    tags: ['sql', 'join', 'left join', 'outer join'],
  },
  {
    id: 'sql-12',
    category: 'SQL',
    subCategory: 'sql',
    title: 'RIGHT JOIN',
    snippet: 'SELECT o.OrderID, e.LastName\nFROM Orders o\nRIGHT JOIN Employees e ON o.EmployeeID = e.EmployeeID;',
    description: 'Returns all records from the right table (Employees), and the matched records from the left table (Orders). The result is NULL from the left side when there is no match.',
    tags: ['sql', 'join', 'right join', 'outer join'],
  },
  {
    id: 'sql-13',
    category: 'SQL',
    subCategory: 'sql',
    title: 'FULL OUTER JOIN',
    snippet: 'SELECT c.CustomerName, o.OrderID\nFROM Customers c\nFULL OUTER JOIN Orders o ON c.CustomerID=o.CustomerID;',
    description: 'Returns all records when there is a match in either the left or right table. It combines the functionality of LEFT JOIN and RIGHT JOIN.',
    tags: ['sql', 'join', 'full join', 'outer join'],
  },
  {
    id: 'sql-14',
    category: 'SQL',
    subCategory: 'sql',
    title: 'UNION Operator',
    snippet: 'SELECT City FROM Customers\nUNION\nSELECT City FROM Suppliers\nORDER BY City;',
    description: 'Combines the result-set of two or more SELECT statements. Each SELECT statement within UNION must have the same number of columns, and the columns must have similar data types. It returns only distinct values.',
    tags: ['sql', 'union', 'set operations', 'combine'],
  },
  {
    id: 'sql-15',
    category: 'SQL',
    subCategory: 'sql',
    title: 'CASE Statement',
    snippet: "SELECT OrderID, Quantity,\nCASE\n    WHEN Quantity > 30 THEN 'High Quantity'\n    WHEN Quantity = 30 THEN 'Medium Quantity'\n    ELSE 'Low Quantity'\nEND AS QuantityText\nFROM OrderDetails;",
    description: 'Goes through conditions and returns a value when the first condition is met (like an if-then-else statement).',
    tags: ['sql', 'case', 'conditional logic', 'if else'],
  },
  {
    id: 'sql-16',
    category: 'SQL',
    subCategory: 'sql',
    title: 'Subquery (in WHERE clause)',
    snippet: "SELECT ProductName\nFROM Products\nWHERE ProductID = (\n  SELECT ProductID FROM OrderDetails WHERE Quantity > 100\n);",
    description: 'A subquery or inner query is a query nested inside another SQL query. It can be used in WHERE, FROM, or SELECT clauses to perform complex data retrieval.',
    tags: ['sql', 'subquery', 'nested query', 'complex query'],
  },
  {
    id: 'sql-17',
    category: 'SQL',
    subCategory: 'sql',
    title: 'Common Table Expression (CTE)',
    snippet: "WITH CustomerCountry AS (\n  SELECT CustomerID, CustomerName, Country FROM Customers WHERE Country = 'Germany'\n)\nSELECT CustomerName FROM CustomerCountry;",
    description: 'A CTE is a temporary named result set that you can reference within a SELECT, INSERT, UPDATE, or DELETE statement. It helps to break down complex queries into simpler, more readable logical blocks.',
    tags: ['sql', 'cte', 'with clause', 'temporary table', 'complex query'],
  },
  {
    id: 'sql-18',
    category: 'SQL',
    subCategory: 'sql',
    title: 'Window Function (ROW_NUMBER)',
    snippet: "SELECT\n  ProductName,\n  Price,\n  ROW_NUMBER() OVER (ORDER BY Price DESC) as PriceRank\nFROM Products;",
    description: 'A window function performs a calculation across a set of table rows that are somehow related to the current row. ROW_NUMBER() assigns a unique rank to each row based on its order.',
    tags: ['sql', 'window function', 'row_number', 'ranking', 'analytics'],
  },
  {
    id: 'sql-19',
    category: 'SQL',
    subCategory: 'sql',
    title: 'CREATE TABLE',
    snippet: "CREATE TABLE Employees (\n    EmployeeID int NOT NULL AUTO_INCREMENT,\n    LastName varchar(255) NOT NULL,\n    FirstName varchar(255),\n    PRIMARY KEY (EmployeeID)\n);",
    description: 'Creates a new table in the database with specified columns and data types.',
    tags: ['sql', 'create table', 'ddl', 'schema', 'data definition'],
  },
  {
    id: 'sql-20',
    category: 'SQL',
    subCategory: 'sql',
    title: 'ALTER TABLE',
    snippet: "ALTER TABLE Customers\nADD Email varchar(255);",
    description: 'Adds, deletes, or modifies columns in an existing table. It can also be used to add and drop various constraints on an existing table.',
    tags: ['sql', 'alter table', 'ddl', 'schema', 'modify'],
  },
  {
    id: 'sql-21',
    category: 'SQL',
    subCategory: 'sql',
    title: 'DROP TABLE',
    snippet: "DROP TABLE Shippers;",
    description: 'Deletes a table and all its data from the database. This action is irreversible.',
    tags: ['sql', 'drop table', 'ddl', 'schema', 'delete'],
  },
  {
    id: 'sql-22',
    category: 'SQL',
    subCategory: 'sql',
    title: 'Window Function (PARTITION BY)',
    snippet: "SELECT\n  ProductName,\n  Category,\n  Price,\n  AVG(Price) OVER (PARTITION BY Category) as AvgPriceInCategory\nFROM Products;",
    description: 'Divides the rows into partitions (groups) and applies the window function independently to each partition. Here, it calculates the average price for each product category.',
    tags: ['sql', 'window function', 'partition by', 'analytics', 'aggregate'],
  },
  {
    id: 'sql-23',
    category: 'SQL',
    subCategory: 'sql',
    title: 'CREATE INDEX',
    snippet: 'CREATE INDEX idx_lastname\nON Employees (LastName);',
    description: 'Creates an index on a table. Indexes are used to retrieve data from the database more quickly. While they speed up queries, they slow down data modification (INSERT, UPDATE, DELETE).',
    tags: ['sql', 'create index', 'ddl', 'performance', 'optimization'],
  },
];